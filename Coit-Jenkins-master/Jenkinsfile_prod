pipeline {
    agent any
    environment{
		registryName = "peak-lattice-347801"
        dockerregistry= "akshithap219/akshitha_proj1"
		registryUrl = "https://hub.docker.com/"
		registryCredential = "My First Project"
        dockercredentials = "dockerhub"
		COMPOSE_PROJECT_NAME = "mycustomsolution"
        tag = "2.0.0"

		mavenHome = tool 'mymaven'
		dockerHome = tool 'mydocker'
		gitHome = tool 'myGit'
		PATH = "$mavenHome/bin:$gitHome/bin:$dockerHome/bin:$PATH"
	}
    stages {
        stage('Checkout'){
			steps{
				sh 'mvn --version'
                sh 'git --version'
				sh 'docker --version'
				echo "Build"
				echo "PATH - $PATH"
				echo "BUILD_NUMBER - $env.BUILD_NUMBER"
				echo "BUILD_ID - $env.BUILD_ID"
				echo "BUILD_TAG - $env.BUILD_TAG"
				echo "JOB_NAME - $env.JOB_NAME"
				//checkout([$class: 'GitSCM', branches: [[name: '*/master']], extensions: [],
				// gitTool: 'Default', userRemoteConfigs: [[url: 'https://github.com/kollidatta/Coit-Jenkins']]]) 
			}
        }	
        stage('Build Images') {
            parallel {
                stage('Build Frontend') {
                    steps{
                        dir('./Coit-Jenkins-master/coit-frontend'){
                            script{
                                sh 'chmod a+x node_modules/.bin/react-scripts'
                                def FRONTENDDOCKER = 'Dockerfile-multistage'
                                DockerFrontend = docker.build("akshithap219/coit-frontend:${tag}","-f ${FRONTENDDOCKER} .")
				                //sh('docker build -t kollidatta/coitfrontend:v1 -f Dockerfile-multistage .')
                                docker.withRegistry("",dockercredentials){
                                DockerFrontend.push();
                                DockerFrontend.push('latest');
                                }
                            }
                        }
                    }
                    post{
                        success{
                            echo "Frontend build is success"
                        }
                        failure{
                            echo 'I run when you fail'
                        }
                    }
                }              
 
                stage('Build backend1'){
                    steps{
                        dir('./coit-backend1'){
                            script{
                                def BACKENDDCKER = 'Dockerfile-multistage'
                                DockerBackend1 = docker.build("akshithap219/coit-backend1:${env.BUILD_TAG}","-f ${BACKENDDCKER} .")
                                //sh('docker build -t kollidatta/coitbackend2:v1 -f ./coit-backend2/Dockerfile .')
                                docker.withRegistry("",dockercredentials){
                                DockerBackend1.push();
                                DockerBackend1.push('latest');
                                }

                                }
                            }
                        
                        }
                    post{
                        success{
                            echo "Frontend build is success"
                        }
                        failure{
                            echo 'I run when you fail'
                        }
                    }
                }
                }
            }
        stage('Modify Yaml'){
            steps{
                checkout([$class: 'GitSCM', branches: [[name: '*/master']], extensions: [], gitTool: 'Default', userRemoteConfigs: [[url: 'https://github.com/kollidatta/Kustomize-frontend']]])
                //dir('https://github.com/kollidatta/Kustomize-frontend'){
                script{
                    //sh('pwd')
                    sh('''docker run --rm --user="root" -e TAG=${tag} -v "${PWD}":/workspace -w /workspace mikefarah/yq eval '.spec.template.spec.containers.image.tag = strenv(TAG)' -i coit-frontend-deployment.yaml''')
                    }
                
            }
            }
        
        
        }
    }

